{"_embedded":{"findings":[{"issue_id":1,"scan_type":"STATIC","description":"<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":5,"cwe":{"id":78,"name":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","href":"https://api.veracode.com/appsec/v1/cwes/78"},"file_path":"com/veracode/verademo/controller/ToolsController.java","file_name":"ToolsController.java","module":"verademo.war","relative_location":27,"finding_category":{"id":18,"name":"Command or Argument Injection","href":"https://api.veracode.com/appsec/v1/categories/18"},"procedure":"com.veracode.verademo.controller.ToolsController.ping","exploitability":0,"attack_vector":"java.lang.Runtime.exec","file_line_number":56},"build_id":24374801},{"issue_id":2,"scan_type":"STATIC","description":"<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":5,"cwe":{"id":78,"name":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","href":"https://api.veracode.com/appsec/v1/cwes/78"},"file_path":"com/veracode/verademo/controller/ToolsController.java","file_name":"ToolsController.java","module":"verademo.war","relative_location":46,"finding_category":{"id":18,"name":"Command or Argument Injection","href":"https://api.veracode.com/appsec/v1/categories/18"},"procedure":"com.veracode.verademo.controller.ToolsController.ping","exploitability":0,"attack_vector":"java.lang.Runtime.exec","file_line_number":59},"build_id":24374801},{"issue_id":3,"scan_type":"STATIC","description":"<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":5,"cwe":{"id":78,"name":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","href":"https://api.veracode.com/appsec/v1/cwes/78"},"file_path":"com/veracode/verademo/controller/ToolsController.java","file_name":"ToolsController.java","module":"verademo.war","relative_location":52,"finding_category":{"id":18,"name":"Command or Argument Injection","href":"https://api.veracode.com/appsec/v1/categories/18"},"procedure":"com.veracode.verademo.controller.ToolsController.fortune","exploitability":0,"attack_vector":"java.lang.Runtime.exec","file_line_number":91},"build_id":24374801},{"issue_id":4,"scan_type":"STATIC","description":"<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variable cmd. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":5,"cwe":{"id":78,"name":"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')","href":"https://api.veracode.com/appsec/v1/cwes/78"},"file_path":"com/veracode/verademo/controller/ToolsController.java","file_name":"ToolsController.java","module":"verademo.war","relative_location":58,"finding_category":{"id":18,"name":"Command or Argument Injection","href":"https://api.veracode.com/appsec/v1/categories/18"},"procedure":"com.veracode.verademo.controller.ToolsController.fortune","exploitability":0,"attack_vector":"java.lang.Runtime.exec","file_line_number":94},"build_id":24374801},{"issue_id":5,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":18,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.controller.UserController.processLogin","exploitability":0,"attack_vector":"java.sql.Statement.executeQuery","file_line_number":166},"build_id":24374801},{"issue_id":6,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":38,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.controller.UserController.showPasswordHint","exploitability":0,"attack_vector":"java.sql.Statement.executeQuery","file_line_number":251},"build_id":24374801},{"issue_id":7,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":58,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.controller.UserController.processRegister","exploitability":0,"attack_vector":"java.sql.Statement.executeQuery","file_line_number":316},"build_id":24374801},{"issue_id":8,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":58,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.controller.UserController.processRegisterFinish","exploitability":0,"attack_vector":"java.sql.Statement.execute","file_line_number":384},"build_id":24374801},{"issue_id":9,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":41,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.controller.UserController.showProfile","exploitability":0,"attack_vector":"java.sql.Statement.executeQuery","file_line_number":495},"build_id":24374801},{"issue_id":10,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the myInfo object, which contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":54,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.controller.UserController.showProfile","exploitability":0,"attack_vector":"java.sql.PreparedStatement.executeQuery","file_line_number":506},"build_id":24374801},{"issue_id":11,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the blabberQuery object, which contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/controller/BlabController.java","file_name":"BlabController.java","module":"verademo.war","relative_location":36,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.controller.BlabController.showBlabbers","exploitability":0,"attack_vector":"java.sql.PreparedStatement.executeQuery","file_line_number":490},"build_id":24374801},{"issue_id":12,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/commands/RemoveAccountCommand.java","file_name":"RemoveAccountCommand.java","module":"verademo.war","relative_location":40,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.commands.RemoveAccountCommand.execute","exploitability":0,"attack_vector":"java.sql.Statement.executeQuery","file_line_number":40},"build_id":24374801},{"issue_id":13,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/commands/RemoveAccountCommand.java","file_name":"RemoveAccountCommand.java","module":"verademo.war","relative_location":75,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.commands.RemoveAccountCommand.execute","exploitability":0,"attack_vector":"java.sql.Statement.execute","file_line_number":47},"build_id":24374801},{"issue_id":14,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/commands/RemoveAccountCommand.java","file_name":"RemoveAccountCommand.java","module":"verademo.war","relative_location":92,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.commands.RemoveAccountCommand.execute","exploitability":0,"attack_vector":"java.sql.Statement.execute","file_line_number":51},"build_id":24374801},{"issue_id":15,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/commands/ListenCommand.java","file_name":"ListenCommand.java","module":"verademo.war","relative_location":44,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.commands.ListenCommand.execute","exploitability":0,"attack_vector":"java.sql.Statement.executeQuery","file_line_number":40},"build_id":24374801},{"issue_id":16,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/commands/ListenCommand.java","file_name":"ListenCommand.java","module":"verademo.war","relative_location":92,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.commands.ListenCommand.execute","exploitability":0,"attack_vector":"java.sql.Statement.execute","file_line_number":47},"build_id":24374801},{"issue_id":17,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/commands/IgnoreCommand.java","file_name":"IgnoreCommand.java","module":"verademo.war","relative_location":44,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.commands.IgnoreCommand.execute","exploitability":0,"attack_vector":"java.sql.Statement.executeQuery","file_line_number":40},"build_id":24374801},{"issue_id":18,"scan_type":"STATIC","description":"<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":4,"cwe":{"id":89,"name":"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')","href":"https://api.veracode.com/appsec/v1/cwes/89"},"file_path":"com/veracode/verademo/commands/IgnoreCommand.java","file_name":"IgnoreCommand.java","module":"verademo.war","relative_location":92,"finding_category":{"id":19,"name":"SQL Injection","href":"https://api.veracode.com/appsec/v1/categories/19"},"procedure":"com.veracode.verademo.commands.IgnoreCommand.execute","exploitability":0,"attack_vector":"java.sql.Statement.execute","file_line_number":47},"build_id":24374801},{"issue_id":19,"scan_type":"STATIC","description":"<span>The serialized-object data stream used in the call to java.io.ObjectInput.readObject() appears to have been constructed with untrusted data. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary Serializable types.  Paired with a weakness in another class's constructor, this could result in a denial of service, code execution, or data corruption vulnerability. readObject() was called on the in object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.</span> <span>Avoid passing untrusted data; if the data is untrusted, consider switching to a safer serialization scheme such as JSON.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":502,"name":"Deserialization of Untrusted Data","href":"https://api.veracode.com/appsec/v1/cwes/502"},"file_path":"com/veracode/verademo/utils/UserFactory.java","file_name":"UserFactory.java","module":"verademo.war","relative_location":74,"finding_category":{"id":22,"name":"Encapsulation","href":"https://api.veracode.com/appsec/v1/categories/22"},"procedure":"com.veracode.verademo.utils.UserFactory.createFromRequest","exploitability":0,"attack_vector":"java.io.ObjectInput.readObject","file_line_number":44},"build_id":24374801},{"issue_id":20,"scan_type":"STATIC","description":"<span>This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from an earlier call to java.util.Base64$Encoder.encode.</span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":113,"name":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","href":"https://api.veracode.com/appsec/v1/cwes/113"},"file_path":"com/veracode/verademo/utils/UserFactory.java","file_name":"UserFactory.java","module":"verademo.war","relative_location":90,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.utils.UserFactory.updateInResponse","exploitability":0,"attack_vector":"javax.servlet.http.HttpServletResponse.addCookie","file_line_number":96},"build_id":24374801},{"issue_id":21,"scan_type":"STATIC","description":"<span>This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":327,"name":"Use of a Broken or Risky Cryptographic Algorithm","href":"https://api.veracode.com/appsec/v1/cwes/327"},"file_path":"com/veracode/verademo/utils/User.java","file_name":"User.java","module":"verademo.war","relative_location":19,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.utils.User.md5","exploitability":1,"attack_vector":"java.security.MessageDigest.getInstance","file_line_number":103},"build_id":24374801},{"issue_id":22,"scan_type":"STATIC","description":"<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. JDBC_PASSWORD initializer</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":259,"name":"Use of Hard-coded Password","href":"https://api.veracode.com/appsec/v1/cwes/259"},"file_path":"com/veracode/verademo/utils/Constants.java","file_name":"Constants.java","module":"verademo.war","relative_location":-1,"finding_category":{"id":10,"name":"Credentials Management","href":"https://api.veracode.com/appsec/v1/categories/10"},"procedure":"UNKNOWN","exploitability":1,"attack_vector":"JDBC_PASSWORD initializer","file_line_number":1},"build_id":24374801},{"issue_id":23,"scan_type":"STATIC","description":"<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodepasswdset</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":259,"name":"Use of Hard-coded Password","href":"https://api.veracode.com/appsec/v1/cwes/259"},"file_path":"com/veracode/verademo/utils/Constants.java","file_name":"Constants.java","module":"verademo.war","relative_location":25,"finding_category":{"id":10,"name":"Credentials Management","href":"https://api.veracode.com/appsec/v1/categories/10"},"procedure":"com.veracode.verademo.utils.Constants.!ctor","exploitability":1,"attack_vector":"hardcodepasswdset","file_line_number":14},"build_id":24374801},{"issue_id":24,"scan_type":"STATIC","description":"<span>This call to showLogin() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":601,"name":"URL Redirection to Untrusted Site ('Open Redirect')","href":"https://api.veracode.com/appsec/v1/cwes/601"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":27,"finding_category":{"id":25,"name":"Insufficient Input Validation","href":"https://api.veracode.com/appsec/v1/categories/25"},"procedure":"com.veracode.verademo.controller.UserController.showLogin","exploitability":1,"attack_vector":"showLogin","file_line_number":82},"build_id":24374801},{"issue_id":25,"scan_type":"STATIC","description":"<span>This call to showLogin() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":601,"name":"URL Redirection to Untrusted Site ('Open Redirect')","href":"https://api.veracode.com/appsec/v1/cwes/601"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":63,"finding_category":{"id":25,"name":"Insufficient Input Validation","href":"https://api.veracode.com/appsec/v1/categories/25"},"procedure":"com.veracode.verademo.controller.UserController.showLogin","exploitability":1,"attack_vector":"showLogin","file_line_number":95},"build_id":24374801},{"issue_id":26,"scan_type":"STATIC","description":"<span>This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":113,"name":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","href":"https://api.veracode.com/appsec/v1/cwes/113"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":21,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.processLogin","exploitability":0,"attack_vector":"javax.servlet.http.HttpServletResponse.addCookie","file_line_number":173},"build_id":24374801},{"issue_id":27,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":99,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.processLogin","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":229},"build_id":24374801},{"issue_id":28,"scan_type":"STATIC","description":"<span>This call to processLogin() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":73,"name":"External Control of File Name or Path","href":"https://api.veracode.com/appsec/v1/cwes/73"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":99,"finding_category":{"id":1,"name":"Directory Traversal","href":"https://api.veracode.com/appsec/v1/categories/1"},"procedure":"com.veracode.verademo.controller.UserController.processLogin","exploitability":0,"attack_vector":"processLogin","file_line_number":230},"build_id":24374801},{"issue_id":29,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":8,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.showPasswordHint","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":237},"build_id":24374801},{"issue_id":30,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":31,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.showPasswordHint","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":249},"build_id":24374801},{"issue_id":31,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable formatString. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":59,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.showPasswordHint","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":255},"build_id":24374801},{"issue_id":32,"scan_type":"STATIC","description":"<span>This call to showPasswordHint() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":86,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.verademo.controller.UserController.showPasswordHint","exploitability":0,"attack_vector":"showPasswordHint","file_line_number":256},"build_id":24374801},{"issue_id":33,"scan_type":"STATIC","description":"<span>This call to showPasswordHint() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":93,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.verademo.controller.UserController.showPasswordHint","exploitability":0,"attack_vector":"showPasswordHint","file_line_number":263},"build_id":24374801},{"issue_id":34,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":61,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.processRegisterFinish","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":385},"build_id":24374801},{"issue_id":35,"scan_type":"STATIC","description":"<span>This call to javax.mail.Message.setSubject() contains a CRLF injection flaw.  Writing untrusted input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Sanitize CRLF sequences from untrusted input.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/93.html\">CWE</a> <a href=\"https://owasp.org/www-community/vulnerabilities/CRLF_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":93,"name":"Improper Neutralization of CRLF Sequences ('CRLF Injection')","href":"https://api.veracode.com/appsec/v1/cwes/93"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":67,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.emailUser","exploitability":1,"attack_vector":"javax.mail.Message.setSubject","file_line_number":433},"build_id":24374801},{"issue_id":36,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":38,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.showProfile","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":493},"build_id":24374801},{"issue_id":37,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":51,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.showProfile","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":504},"build_id":24374801},{"issue_id":38,"scan_type":"STATIC","description":"<span>This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variable cookie. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getCookies, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":113,"name":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","href":"https://api.veracode.com/appsec/v1/cwes/113"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":63,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.processProfile","exploitability":1,"attack_vector":"javax.servlet.http.HttpServletResponse.addCookie","file_line_number":631},"build_id":24374801},{"issue_id":39,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":88,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.processProfile","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":658},"build_id":24374801},{"issue_id":40,"scan_type":"STATIC","description":"<span>This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":73,"name":"External Control of File Name or Path","href":"https://api.veracode.com/appsec/v1/cwes/73"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":89,"finding_category":{"id":1,"name":"Directory Traversal","href":"https://api.veracode.com/appsec/v1/categories/1"},"procedure":"com.veracode.verademo.controller.UserController.processProfile","exploitability":0,"attack_vector":"java.io.File.!operator_javanewinit","file_line_number":660},"build_id":24374801},{"issue_id":41,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":25,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.downloadImage","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":694},"build_id":24374801},{"issue_id":42,"scan_type":"STATIC","description":"<span>This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":73,"name":"External Control of File Name or Path","href":"https://api.veracode.com/appsec/v1/cwes/73"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":29,"finding_category":{"id":1,"name":"Directory Traversal","href":"https://api.veracode.com/appsec/v1/categories/1"},"procedure":"com.veracode.verademo.controller.UserController.downloadImage","exploitability":0,"attack_vector":"java.io.File.!operator_javanewinit","file_line_number":699},"build_id":24374801},{"issue_id":43,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":42,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.downloadImage","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":708},"build_id":24374801},{"issue_id":44,"scan_type":"STATIC","description":"<span>This call to javax.servlet.ServletResponse.setContentType() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":113,"name":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","href":"https://api.veracode.com/appsec/v1/cwes/113"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":43,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.downloadImage","exploitability":0,"attack_vector":"javax.servlet.ServletResponse.setContentType","file_line_number":711},"build_id":24374801},{"issue_id":45,"scan_type":"STATIC","description":"<span>This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":113,"name":"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')","href":"https://api.veracode.com/appsec/v1/cwes/113"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":52,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.downloadImage","exploitability":0,"attack_vector":"javax.servlet.http.HttpServletResponse.setHeader","file_line_number":713},"build_id":24374801},{"issue_id":46,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":98,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.usernameExists","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":803},"build_id":24374801},{"issue_id":47,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":41,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.UserController.updateUsername","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":859},"build_id":24374801},{"issue_id":48,"scan_type":"STATIC","description":"<span>This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":73,"name":"External Control of File Name or Path","href":"https://api.veracode.com/appsec/v1/cwes/73"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":54,"finding_category":{"id":1,"name":"Directory Traversal","href":"https://api.veracode.com/appsec/v1/categories/1"},"procedure":"com.veracode.verademo.controller.UserController.updateUsername","exploitability":0,"attack_vector":"java.io.File.!operator_javanewinit","file_line_number":863},"build_id":24374801},{"issue_id":49,"scan_type":"STATIC","description":"<span>This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":327,"name":"Use of a Broken or Risky Cryptographic Algorithm","href":"https://api.veracode.com/appsec/v1/cwes/327"},"file_path":"com/veracode/verademo/controller/UserController.java","file_name":"UserController.java","module":"verademo.war","relative_location":21,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.controller.UserController.md5","exploitability":1,"attack_vector":"java.security.MessageDigest.getInstance","file_line_number":961},"build_id":24374801},{"issue_id":50,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":10,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":109},"build_id":24374801},{"issue_id":51,"scan_type":"STATIC","description":"<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":331,"name":"Insufficient Entropy","href":"https://api.veracode.com/appsec/v1/cwes/331"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":25,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":-1,"attack_vector":"java.util.Random.nextBoolean","file_line_number":128},"build_id":24374801},{"issue_id":52,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":30,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":132},"build_id":24374801},{"issue_id":53,"scan_type":"STATIC","description":"<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":331,"name":"Insufficient Entropy","href":"https://api.veracode.com/appsec/v1/cwes/331"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":39,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":-1,"attack_vector":"java.util.Random.nextInt","file_line_number":153},"build_id":24374801},{"issue_id":54,"scan_type":"STATIC","description":"<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":331,"name":"Insufficient Entropy","href":"https://api.veracode.com/appsec/v1/cwes/331"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":40,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":-1,"attack_vector":"java.util.Random.nextInt","file_line_number":156},"build_id":24374801},{"issue_id":55,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":43,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":159},"build_id":24374801},{"issue_id":56,"scan_type":"STATIC","description":"<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":331,"name":"Insufficient Entropy","href":"https://api.veracode.com/appsec/v1/cwes/331"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":52,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":-1,"attack_vector":"java.util.Random.nextInt","file_line_number":179},"build_id":24374801},{"issue_id":57,"scan_type":"STATIC","description":"<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":331,"name":"Insufficient Entropy","href":"https://api.veracode.com/appsec/v1/cwes/331"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":54,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":-1,"attack_vector":"java.util.Random.nextInt","file_line_number":183},"build_id":24374801},{"issue_id":58,"scan_type":"STATIC","description":"<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":331,"name":"Insufficient Entropy","href":"https://api.veracode.com/appsec/v1/cwes/331"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":55,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":-1,"attack_vector":"java.util.Random.nextInt","file_line_number":187},"build_id":24374801},{"issue_id":59,"scan_type":"STATIC","description":"<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":331,"name":"Insufficient Entropy","href":"https://api.veracode.com/appsec/v1/cwes/331"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":57,"finding_category":{"id":12,"name":"Cryptographic Issues","href":"https://api.veracode.com/appsec/v1/categories/12"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":-1,"attack_vector":"java.util.Random.nextInt","file_line_number":191},"build_id":24374801},{"issue_id":60,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":60,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":193},"build_id":24374801},{"issue_id":61,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/ResetController.java","file_name":"ResetController.java","module":"verademo.war","relative_location":63,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.ResetController.processReset","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":194},"build_id":24374801},{"issue_id":62,"scan_type":"STATIC","description":"<span>This call to getMoreFeed() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"com/veracode/verademo/controller/BlabController.java","file_name":"BlabController.java","module":"verademo.war","relative_location":99,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.verademo.controller.BlabController.getMoreFeed","exploitability":0,"attack_vector":"getMoreFeed","file_line_number":204},"build_id":24374801},{"issue_id":63,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/BlabController.java","file_name":"BlabController.java","module":"verademo.war","relative_location":24,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.BlabController.processBlabbers","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":558},"build_id":24374801},{"issue_id":64,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/controller/BlabController.java","file_name":"BlabController.java","module":"verademo.war","relative_location":30,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.controller.BlabController.processBlabbers","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":559},"build_id":24374801},{"issue_id":65,"scan_type":"STATIC","description":"<span>This call to java.lang.Class.forName() uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate the class name against a combination of white and blocklists to ensure that only expected behavior is produced.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/470.html\">CWE</a> <a href=\"https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection\">OWASP</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":470,"name":"Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')","href":"https://api.veracode.com/appsec/v1/cwes/470"},"file_path":"com/veracode/verademo/controller/BlabController.java","file_name":"BlabController.java","module":"verademo.war","relative_location":45,"finding_category":{"id":25,"name":"Insufficient Input Validation","href":"https://api.veracode.com/appsec/v1/categories/25"},"procedure":"com.veracode.verademo.controller.BlabController.processBlabbers","exploitability":1,"attack_vector":"java.lang.Class.forName","file_line_number":571},"build_id":24374801},{"issue_id":66,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/commands/RemoveAccountCommand.java","file_name":"RemoveAccountCommand.java","module":"verademo.war","relative_location":35,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.commands.RemoveAccountCommand.execute","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":39},"build_id":24374801},{"issue_id":67,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/commands/RemoveAccountCommand.java","file_name":"RemoveAccountCommand.java","module":"verademo.war","relative_location":72,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.commands.RemoveAccountCommand.execute","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":46},"build_id":24374801},{"issue_id":68,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/commands/RemoveAccountCommand.java","file_name":"RemoveAccountCommand.java","module":"verademo.war","relative_location":90,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.commands.RemoveAccountCommand.execute","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":50},"build_id":24374801},{"issue_id":69,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/commands/ListenCommand.java","file_name":"ListenCommand.java","module":"verademo.war","relative_location":39,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.commands.ListenCommand.execute","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":39},"build_id":24374801},{"issue_id":70,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/commands/ListenCommand.java","file_name":"ListenCommand.java","module":"verademo.war","relative_location":89,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.commands.ListenCommand.execute","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":46},"build_id":24374801},{"issue_id":71,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/commands/IgnoreCommand.java","file_name":"IgnoreCommand.java","module":"verademo.war","relative_location":39,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.commands.IgnoreCommand.execute","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":39},"build_id":24374801},{"issue_id":72,"scan_type":"STATIC","description":"<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":117,"name":"Improper Output Neutralization for Logs","href":"https://api.veracode.com/appsec/v1/cwes/117"},"file_path":"com/veracode/verademo/commands/IgnoreCommand.java","file_name":"IgnoreCommand.java","module":"verademo.war","relative_location":89,"finding_category":{"id":21,"name":"CRLF Injection","href":"https://api.veracode.com/appsec/v1/categories/21"},"procedure":"com.veracode.verademo.commands.IgnoreCommand.execute","exploitability":1,"attack_vector":"org.apache.log4j.Category.info","file_line_number":46},"build_id":24374801},{"issue_id":73,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable request.getParameter(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/tools.jsp","file_name":"tools.jsp","module":"verademo.war","relative_location":37,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp._jspService","exploitability":2,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":65},"build_id":24374801},{"issue_id":74,"scan_type":"STATIC","description":"<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable ping. The tainted data originated from an earlier call to java.lang.Process.getInputStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/tools.jsp","file_name":"tools.jsp","module":"verademo.war","relative_location":52,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp._jspService","exploitability":0,"attack_vector":"java.io.Writer.write","file_line_number":68},"build_id":24374801},{"issue_id":75,"scan_type":"STATIC","description":"<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable fortunes. The tainted data originated from an earlier call to java.lang.Process.getInputStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/tools.jsp","file_name":"tools.jsp","module":"verademo.war","relative_location":61,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp._jspService","exploitability":0,"attack_vector":"java.io.Writer.write","file_line_number":78},"build_id":24374801},{"issue_id":76,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/register.jsp","file_name":"register.jsp","module":"verademo.war","relative_location":39,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":60},"build_id":24374801},{"issue_id":77,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/register.jsp","file_name":"register.jsp","module":"verademo.war","relative_location":60,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":87},"build_id":24374801},{"issue_id":78,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/register-finish.jsp","file_name":"register-finish.jsp","module":"verademo.war","relative_location":41,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_002dfinish_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":60},"build_id":24374801},{"issue_id":79,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/register-finish.jsp","file_name":"register-finish.jsp","module":"verademo.war","relative_location":55,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_002dfinish_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":83},"build_id":24374801},{"issue_id":80,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/profile.jsp","file_name":"profile.jsp","module":"verademo.war","relative_location":17,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":63},"build_id":24374801},{"issue_id":81,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/profile.jsp","file_name":"profile.jsp","module":"verademo.war","relative_location":25,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":91},"build_id":24374801},{"issue_id":82,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable realName. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/profile.jsp","file_name":"profile.jsp","module":"verademo.war","relative_location":29,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":102},"build_id":24374801},{"issue_id":83,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabName. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/profile.jsp","file_name":"profile.jsp","module":"verademo.war","relative_location":33,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":111},"build_id":24374801},{"issue_id":84,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/profile.jsp","file_name":"profile.jsp","module":"verademo.war","relative_location":36,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":120},"build_id":24374801},{"issue_id":85,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable heckler.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/profile.jsp","file_name":"profile.jsp","module":"verademo.war","relative_location":55,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":161},"build_id":24374801},{"issue_id":86,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable heckler.getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/profile.jsp","file_name":"profile.jsp","module":"verademo.war","relative_location":58,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":164},"build_id":24374801},{"issue_id":87,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable events.get(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/profile.jsp","file_name":"profile.jsp","module":"verademo.war","relative_location":76,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":201},"build_id":24374801},{"issue_id":88,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/login.jsp","file_name":"login.jsp","module":"verademo.war","relative_location":35,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":64},"build_id":24374801},{"issue_id":89,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable target. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/login.jsp","file_name":"login.jsp","module":"verademo.war","relative_location":53,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":83},"build_id":24374801},{"issue_id":90,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/login.jsp","file_name":"login.jsp","module":"verademo.war","relative_location":62,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":90},"build_id":24374801},{"issue_id":91,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable currentUser. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/feed.jsp","file_name":"feed.jsp","module":"verademo.war","relative_location":15,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":59},"build_id":24374801},{"issue_id":92,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/feed.jsp","file_name":"feed.jsp","module":"verademo.war","relative_location":22,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":70},"build_id":24374801},{"issue_id":93,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getAuthor().getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/feed.jsp","file_name":"feed.jsp","module":"verademo.war","relative_location":34,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":94},"build_id":24374801},{"issue_id":94,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/feed.jsp","file_name":"feed.jsp","module":"verademo.war","relative_location":38,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":97},"build_id":24374801},{"issue_id":95,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getAuthor().getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/feed.jsp","file_name":"feed.jsp","module":"verademo.war","relative_location":42,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":99},"build_id":24374801},{"issue_id":96,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/feed.jsp","file_name":"feed.jsp","module":"verademo.war","relative_location":67,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":142},"build_id":24374801},{"issue_id":97,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blabbers.jsp","file_name":"blabbers.jsp","module":"verademo.war","relative_location":24,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":66},"build_id":24374801},{"issue_id":98,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blabbers.jsp","file_name":"blabbers.jsp","module":"verademo.war","relative_location":39,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":101},"build_id":24374801},{"issue_id":99,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blabbers.jsp","file_name":"blabbers.jsp","module":"verademo.war","relative_location":44,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":104},"build_id":24374801},{"issue_id":100,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blab_name. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blab.jsp","file_name":"blab.jsp","module":"verademo.war","relative_location":20,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":57},"build_id":24374801},{"issue_id":101,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable content. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blab.jsp","file_name":"blab.jsp","module":"verademo.war","relative_location":25,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":61},"build_id":24374801},{"issue_id":102,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blab.jsp","file_name":"blab.jsp","module":"verademo.war","relative_location":35,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":69},"build_id":24374801},{"issue_id":103,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getAuthor().getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blab.jsp","file_name":"blab.jsp","module":"verademo.war","relative_location":57,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":105},"build_id":24374801},{"issue_id":104,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blab.jsp","file_name":"blab.jsp","module":"verademo.war","relative_location":61,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":109},"build_id":24374801},{"issue_id":105,"scan_type":"STATIC","description":"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getAuthor().getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>","count":1,"context_type":"APPLICATION","context_guid":"bfb128c9-3b75-4768-ae88-ad605cd83fb1","violates_policy":true,"finding_status":{"first_found_date":"2023-03-02T11:43:03.301Z","status":"OPEN","resolution":"UNRESOLVED","mitigation_review_status":"NONE","new":false,"resolution_status":"NONE","last_seen_date":"2023-03-02T12:24:57.106Z"},"finding_details":{"severity":3,"cwe":{"id":80,"name":"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)","href":"https://api.veracode.com/appsec/v1/cwes/80"},"file_path":"/WEB-INF/views/blab.jsp","file_name":"blab.jsp","module":"verademo.war","relative_location":67,"finding_category":{"id":20,"name":"Cross-Site Scripting (XSS)","href":"https://api.veracode.com/appsec/v1/categories/20"},"procedure":"com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService","exploitability":0,"attack_vector":"javax.servlet.jsp.JspWriter.print","file_line_number":111},"build_id":24374801}]},"_links":{"self":{"href":"https://api.veracode.com/appsec/v2/applications/bfb128c9-3b75-4768-ae88-ad605cd83fb1/findings?violates_policy=true&scan_type=STATIC{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}","templated":true},"application":{"href":"https://api.veracode.com/appsec/v1/applications/bfb128c9-3b75-4768-ae88-ad605cd83fb1"},"sca":{"href":"https://api.veracode.com/appsec/v2/applications/bfb128c9-3b75-4768-ae88-ad605cd83fb1/findings?violates_policy=true&scan_type=SCA{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}","templated":true}},"page":{"size":105,"total_elements":105,"total_pages":1,"number":0}}